#!/usr/bin/env python3

import os
import sys
import shutil
import subprocess
from setup import main
from typing import Optional, List, Union, Dict, Any
from util import (
    check_dependencies,
    pip,
    popup_options,
    deref,
    load_conf_setting,
    save_conf_setting,
    cache,
    exit_with_message,
    show_message,
    get_dotnet48,
    popup_download,
    wine,
    winetricks,
    log,
    popup_execute,
)

# Define paths and constants
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
BAT_FILE = "\\\\".join(SCRIPT_PATH.split(os.sep) + ["wemod.bat"])
WEMOD_BAT = f"start 'Z:{BAT_FILE}'"
loacom = load_conf_setting("SteamCompatDataPath")
if not loacom:
    BASE_STEAM_COMPAT = os.getenv("STEAM_COMPAT_DATA_PATH")
elif loacom:
    if os.path.isabs(loacom):
        BASE_STEAM_COMPAT = str(loacom)
    else:
        BASE_STEAM_COMPAT = os.path.abspath(os.path.join(SCRIPT_PATH, loacom))
del loacom  # Delete temp base compat variable

WINEPREFIX = os.path.join(BASE_STEAM_COMPAT, "pfx")
STEAM_COMPAT_FOLDER = os.path.abspath(os.path.dirname(BASE_STEAM_COMPAT))
WINETRICKS = os.path.join(SCRIPT_PATH, "winetricks")
INIT_FILE = os.path.join(WINEPREFIX, ".wemod_installer")


def parse_version(version_str: Optional[str] = None) -> Optional[List[int]]:
    if version_str and isinstance(version_str, str):
        # Replace '-' with '.' and ',' with '.'
        dot_version = version_str.replace("-", ".").replace(",", ".")

        # Clean up number
        numbers = str(dot_version + ".0")
        majornumber = None
        minornumber = None
        addat = 0
        currentnumber = ""
        for number in numbers:
            if number and number.isnumeric():
                currentnumber += str(number)
                if currentnumber:
                    if addat == 0:
                        majornumber = currentnumber
                    elif addat == 1:
                        minornumber = currentnumber
            elif number and number == "." and currentnumber:
                addat += 1
                currentnumber = ""
            if addat > 1:
                break

        if majornumber and minornumber:  # Return numbers if set
            return [int(majornumber), int(minornumber)]
        else:
            return None

    elif isinstance(version_str, list):
        return version_str
    return None


def read_version(version_file: str) -> Optional[str]:  # read file
    try:
        with open(version_file, "r") as file:
            return file.read().strip()
    except FileNotFoundError:
        return None


# Scan the steam compat folder for wemod installed prefixes
def scanfolderforversions(
    current_version_parts: List[Union[int, None]] = [None, None]
) -> List[Union[int, None]]:
    # At default we dont know of any available version
    closest_version_folder = None
    closest_version_number = None
    priority = 5

    # For all folders in steam compat
    for folder in os.listdir(STEAM_COMPAT_FOLDER):
        # Get the version file, folder path and check if wemod is installed
        folder_path = os.path.join(STEAM_COMPAT_FOLDER, folder)
        version_file = os.path.join(folder_path, "version")

        if os.path.isdir(folder_path) and os.path.exists(
            os.path.join(folder_path, "pfx", ".wemod_installer")
        ):
            folder_version_parts = parse_version(read_version(version_file))

            if (
                folder_version_parts
                and isinstance(folder_version_parts, list)
                and folder_version_parts[0]
                and folder_version_parts[1]
            ):
                if (
                    folder_version_parts[0] == current_version_parts[0]
                    and folder_version_parts[1] == current_version_parts[1]
                ):
                    # Same major and minor version
                    closest_version_folder = folder_path
                    closest_version_number = folder_version_parts
                    break
                elif (
                    folder_version_parts[0] == current_version_parts[0]
                    and folder_version_parts[1] < current_version_parts[1]
                    and priority >= 2
                ):
                    # Same major, lower minor version
                    if (
                        not closest_version_folder
                        or folder_version_parts[1] > closest_version_number[1]
                    ):
                        priority = 2
                        closest_version_folder = folder_path
                        closest_version_number = folder_version_parts
                elif (
                    folder_version_parts[0] == current_version_parts[0]
                    and folder_version_parts[1] > current_version_parts[1]
                    and priority >= 3
                ):
                    # Same major, higher minor version
                    if (
                        not closest_version_folder
                        or folder_version_parts[1] < closest_version_number[1]
                    ):
                        priority = 3
                        closest_version_folder = folder_path
                        closest_version_number = folder_version_parts
                elif (
                    folder_version_parts[0] < current_version_parts[0]
                    and priority >= 4
                ):
                    # Lower major version
                    if (
                        not closest_version_folder
                        or folder_version_parts[1] > closest_version_number[1]
                    ):
                        priority = 4
                        closest_version_folder = folder_path
                        closest_version_number = folder_version_parts
                elif (
                    folder_version_parts[0] > current_version_parts[0]
                    and priority >= 5
                ):
                    # Higher major version
                    if (
                        not closest_version_folder
                        or folder_version_parts[1] < closest_version_number[1]
                    ):
                        closest_version_folder = folder_path
                        closest_version_number = folder_version_parts
    return closest_version_number, closest_version_folder


def syncwemod(
    folder: Optional[str] = None,
) -> (
    None
):  # Symlink wemod data to make all wemod prefixes use the same wemod data
    response = None
    package_prefix = os.getenv(
        "PACKAGEPREFIX"
    )  # use PACKAGEPREFIX=true in front of the command to generate a ge-proton-prefix zip and exit
    if not package_prefix:
        package_prefix = load_conf_setting("PackagePrefix")
        if package_prefix:
            if package_prefix.lower() != "true":
                try:
                    package_prefix = int(package_prefix)
                except Exception as e:
                    package_prefix = "false"
                else:
                    if package_prefix > 0:
                        package_prefix -= 1
                        save_conf_setting("PackagePrefix", package_prefix)
                        package_prefix = "true"
    if package_prefix and folder == None and package_prefix.lower() == "true":
        from util import copy_folder_with_progress

        log(
            "Prefix packaging was requested with PACKAGEPREFIX=true in front of the command"
        )
        current_proton_version = read_version(
            os.path.join(BASE_STEAM_COMPAT, "version")
        )
        cut_proton_version = parse_version(current_proton_version)
        destfile = os.path.join(
            STEAM_COMPAT_FOLDER,
            "prefixes",
            "GE-Proton"
            + str(cut_proton_version[0])
            + "."
            + str(cut_proton_version[1]),
        )
        os.makedirs(os.path.join(destfile, "temp"), exist_ok=True)
        shutil.rmtree(destfile)
        os.makedirs(destfile, exist_ok=True)
        copy_folder_with_progress(BASE_STEAM_COMPAT, destfile, {None}, {None})
        if os.path.exists(destfile + ".zip"):
            os.remove(destfile + ".zip")
        archive_command = (
            f"cd '{destfile}' && zip -r '{os.path.basename(destfile)}.zip' *"
        )
        log(archive_command)
        exit_code = popup_execute("Creating archive...", archive_command)
        os.rename(
            os.path.join(destfile, os.path.basename(destfile)) + ".zip",
            destfile + ".zip",
        )
        shutil.rmtree(destfile)
        if exit_code != 0:
            exit_message = f"Archive creation failed with code '{exit_code}'"
            exit_with_message("ERROR", exit_message, exit_code)
        os.system(
            'xdg-open "%s"' % os.path.join(STEAM_COMPAT_FOLDER, "prefixes")
        )
        log("Done creating Prefix zip")
        sys.exit(0)

    if folder == None:
        folder = BASE_STEAM_COMPAT

    WeModData = os.path.join(SCRIPT_PATH, "wemod_data")  # link source
    WeModExtenal = os.path.join(
        folder, "pfx/drive_c/users/steamuser/AppData/Roaming/WeMod"
    )  # link dest

    log(
        f"Syncing wemod data from '{WeModExtenal}' to laucher dir '{WeModData}'"
    )
    if not os.path.isdir(WeModData):
        os.makedirs(WeModData)  # Make wemod data folder if missing
    if not os.path.isdir(WeModExtenal):
        os.makedirs(WeModExtenal)
    if os.path.isdir(WeModExtenal) and not os.path.islink(
        WeModExtenal
    ):  # If the extenal data exist
        if (
            len(os.listdir(WeModData)) > 0
            and len(os.listdir(WeModExtenal)) > 0
        ):  # If wemod folder and extenal folder are not empty
            # We ask what files to use

            response = show_message(
                f"Warnig wemod might have been installed previously.\nUse wemod laucher dir account (Yes) or\nUse wemod prefix/game dir account (No)",
                title="Multiple accounts found",
                yesno=True,
            )
        if (response == "No" or len(os.listdir(WeModData)) == 0) and len(
            os.listdir(WeModExtenal)
        ) > 0:
            if response == None:
                log("Local wemod data was missing")
            else:
                log("The local wemod data was requested to be overwritten")
            shutil.rmtree(WeModData)
            shutil.copytree(
                WeModExtenal, WeModData
            )  # We copy from game if the user selects or if data is empty
        shutil.rmtree(WeModExtenal)  # Remove wemod data from game
    if not os.path.isdir(WeModExtenal) and not os.path.islink(WeModExtenal):
        os.symlink(
            WeModData, WeModExtenal
        )  # And symlink the data from the wemod laucher
        log("Linked wemod data to gameprefix")

    if not os.path.exists(
        os.path.join(SCRIPT_PATH, "wemod_bin", "WeMod.exe")
    ):
        main()


# Initialize the environment
def init(proton: str) -> None:
    # Create wineprefix directory if it doesn't exist
    if not os.path.isdir(WINEPREFIX):
        os.makedirs(os.getenv("STEAM_COMPAT_DATA_PATH"), exist_ok=True)
        os.makedirs(WINEPREFIX, exist_ok=True)

    # If wemod is not installed try to copy a working prefix to the current one
    log(f"Looking for init file '{INIT_FILE}'")
    if not os.path.exists(INIT_FILE):
        # Grab active proton version
        current_proton_version = read_version(
            os.path.join(BASE_STEAM_COMPAT, "version")
        )
        current_version_parts = parse_version(current_proton_version)

        log(
            f"Loking for compatible wine prefixes in '{STEAM_COMPAT_FOLDER}' with proton version '{current_version_parts[0]}.{current_version_parts[1]}'"
        )

        # Get closest version that has wemod installed
        closest_version, closest_prefix_folder = scanfolderforversions(
            current_version_parts
        )
        cut_version = parse_version(closest_version)

        if closest_version and current_version_parts:
            log(
                f"Found was '{cut_version[0]}.{cut_version[1]}' on '{current_version_parts[0]}.{current_version_parts[1]}'"
            )

        from util import copy_folder_with_progress

        response = "No"
        if (
            closest_version
            and current_version_parts
            and closest_version == current_version_parts
        ):
            response = "Yes"
        elif (
            closest_version
            and current_version_parts
            and closest_version[0] == current_version_parts[0]
        ):

            response = show_message(
                f"The Proton version {current_version_parts[0]}.{current_version_parts[1]} dosn't have WeMod installed. Would you like to use the closest proton version {cut_version[0]}.{cut_version[1]} that has WeMod installed, which is probably going to work?",
                title="Likely compatible WeMod version detected",
                yesno=True,
            )
        elif (
            closest_version
            and current_version_parts
            and closest_version[0] != current_version_parts[0]
        ):
            response = show_message(
                f"The Proton version {current_version_parts[0]}.{current_version_parts[1]} dosn't have WeMod installed. Would you like to attempt to use the closest proton version {cut_version[0]}.{cut_version[1]} that has WeMod installed, which may result in some issues?",
                title="Mabye compatible WeMod version detected",
                yesno=True,
            )
        else:
            log(
                "No compatible Proton version found in the compatibility folder."
            )
        if response == "Yes":
            # Copy the closest version's prefix to the gameprefix
            log(f"Copying {closest_prefix_folder} to {BASE_STEAM_COMPAT}")
            syncwemod(
                closest_prefix_folder
            )  # Sync wemod data in closest version
            copy_folder_with_progress(
                closest_prefix_folder, BASE_STEAM_COMPAT, {None}, {None}
            )
            syncwemod()  # Sync wemod data
            log(
                f"Copied Proton version {cut_version[0]}.{cut_version[1]} prefix to game prefix that was on version {current_version_parts[0]}.{current_version_parts[1]}"
            )
        elif closest_version and current_version_parts:
            log(
                f"User chose not to use an alternative Proton version, the active version was {current_version_parts[0]}.{current_version_parts[1]}."
            )
        else:
            log(f"No versions to copy available")

    # Check for the initialization file in the wineprefix
    log(f"Looking once more for the init file")
    if os.path.exists(INIT_FILE):
        syncwemod()  # Sync wemod data and prefix packaging
        log("Found init file. Continuing launch...")
        return

    log("Init file not found! Attempting to prepare the WINEPREFIX")

    # User choice for prefix setup
    prefix_op = popup_options(
        "Prefix Setup",
        "Would you like to build/modify your prefix or download an already setup one?",
        ["build", "download"],
    )

    # Determine proton directory
    proton_dir = proton.split("/")[:-1]
    proton_dir.append("files")
    proton_dir.append("bin")
    proton_dir = "/".join(proton_dir)
    log("Using wine from Proton at path: '{}'".format(proton_dir))

    # Call appropriate function based on user choice
    if prefix_op == "build":
        build_prefix(proton_dir)
    else:
        download_prefix(proton_dir)
    syncwemod()  # Sync wemod data


def get_github_releases(repo_name: str) -> List[Any]:
    try:
        import requests
    except Exception as e:
        print(f"Failed to fetch releases, error reports {e}")
        return []
    url = f"https://api.github.com/repos/{repo_name}/releases"
    response = requests.get(url)
    if response.status_code == 200:
        releases = response.json()
        return releases
    else:
        print("Failed to fetch releases.")
        return []


def find_closest_compatible_release(
    releases, current_version_parts: List[Union[int, None]] = [None, None]
) -> List[Union[Optional[List[int]], Optional[str]]]:
    closest_release = None
    closest_version = None
    closest_release_url = None
    priority = 5

    for release in releases:
        tag_name = release.get("tag_name")
        if tag_name and tag_name.startswith("PfxVer"):
            release_version_parts = parse_version(tag_name)
            if release_version_parts and current_version_parts:
                if (
                    release_version_parts[0] == current_version_parts[0]
                    and release_version_parts[1] == current_version_parts[1]
                ):
                    # Exact match
                    closest_release = release
                    closest_version = release_version_parts
                    closest_release_url = release["assets"][0][
                        "browser_download_url"
                    ]
                    break
                elif (
                    release_version_parts[0] == current_version_parts[0]
                    and release_version_parts[1] < current_version_parts[1]
                    and priority >= 2
                ):
                    # Same major, lower minor version
                    if (
                        not closest_release
                        or release_version_parts[1] > closest_version[1]
                    ):
                        priority = 2
                        closest_release = release
                        closest_version = release_version_parts
                        closest_release_url = release["assets"][0][
                            "browser_download_url"
                        ]
                elif (
                    release_version_parts[0] == current_version_parts[0]
                    and release_version_parts[1] > current_version_parts[1]
                    and priority >= 3
                ):
                    # Same major, higher minor version
                    if (
                        not closest_release
                        or release_version_parts[1] < closest_version[1]
                    ):
                        priority = 3
                        closest_release = release
                        closest_version = release_version_parts
                        closest_release_url = release["assets"][0][
                            "browser_download_url"
                        ]
                elif (
                    release_version_parts[0] < current_version_parts[0]
                    and priority >= 4
                ):
                    # Lower major version
                    if (
                        not closest_release
                        or release_version_parts[1] > closest_version[1]
                    ):
                        priority = 4
                        closest_release = release
                        closest_version = release_version_parts
                        closest_release_url = release["assets"][0][
                            "browser_download_url"
                        ]
                elif (
                    release_version_parts[0] > current_version_parts[0]
                    and priority >= 5
                ):
                    # Higher major version
                    if (
                        not closest_release
                        or release_version_parts[1] < closest_version[1]
                    ):
                        closest_release = release
                        closest_version = release_version_parts
                        closest_release_url = release["assets"][0][
                            "browser_download_url"
                        ]

    return closest_version, closest_release_url


# Function to download and unpack a pre-configured wineprefix
def download_prefix(proton_dir: str) -> None:
    from shutil import which
    import FreeSimpleGUI as sg

    # Check and prepare for first launch
    if not os.path.exists(WINEPREFIX + "/drive_c"):
        log(WINEPREFIX)
        exit_with_message(
            "First Launch",
            "First Launch Detected: Please run the game once without wemod first. Error.",
        )

    repo_user = load_conf_setting("RepoUser")
    repo_name = load_conf_setting("RepoName")
    if not repo_name:
        repo_name = "DaniAsh551"
        save_conf_setting("RepoUser", repo_name)
    if not repo_user:
        repo_user = "wemod-launcher"
        save_conf_setting("RepoName", repo_user)

    repo_parts = os.getenv("REPO_STRING")
    if repo_parts:
        repo_parts = repo_parts.split("/", 1)
        if repo_parts[0] and repo_parts[0] != "":
            repo_user = repo_parts[0]
        if repo_parts[1] and repo_parts[1] != "":
            repo_name = repo_parts[1]

    repo_concat = repo_user + "/" + repo_name

    current_proton_version = read_version(
        os.path.join(BASE_STEAM_COMPAT, "version")
    )
    current_version_parts = parse_version(current_proton_version)

    releases = get_github_releases(repo_concat)
    closest_version, url = find_closest_compatible_release(
        releases, current_version_parts
    )
    file_name = f"wemod_prefix{current_version_parts[0]}.{current_version_parts[1]}.zip"

    if (
        closest_version
        and current_version_parts
        and closest_version == current_version_parts
    ):
        response = "Yes"
    elif (
        closest_version
        and current_version_parts
        and closest_version[0] == current_version_parts[0]
    ):
        response = show_message(
            f"This is most likely going to work, the version {closest_version[0]}.{closest_version[1]} is probably compatible with version {current_version_parts[0]}.{current_version_parts[1]}, download and use it?",
            title="Likely compatible version found",
            yesno=True,
        )
    elif closest_version and current_version_parts:
        response = show_message(
            f"The current version {closest_version[0]}.{closest_version[1]} might not be compatible with version {current_version_parts[0]}.{current_version_parts[1]}, download and use it?",
            title="Mabye copatible version found",
            yesno=True,
        )
    else:
        log(
            f"There was no version to download on repo '{repo_concat}', Error..."
        )
        exit_with_message(
            "No downloads available",
            f"Nothing to download on repo '{repo_concat}'. Error.",
        )
    if response == "No":
        log(
            f"User was unhappy with the version download choice of {closest_version[0]}.{closest_version[1]} for {current_version_parts[0]}.{current_version_parts[1]}, exiting"
        )
        sys.exit(0)

    # Download or use cached prefix
    prefix_path = cache(
        file_name,
        lambda name: popup_download("Dowloading Prefix...", url, name),
    )

    # Unpack the downloaded prefix
    log("Unpacking prefix...")
    command = f"unzip -o '{prefix_path}' -d '{BASE_STEAM_COMPAT}'"
    log(f"Using command for zip files: {command}")

    exit_code = popup_execute("Unpacking prefix...", command)
    if exit_code != 0:
        exit_message = f"Prefix unpacking failed with code '{exit_code}'"
        exit_with_message("ERROR", exit_message, exit_code)

    # Delete cache file since the prefix copyer has been added there is no need to keep this file around
    fullfile = os.path.join(SCRIPT_PATH, ".cache", file_name)
    if os.path.exists(fullfile):
        os.remove(fullfile)

    syncwemod()
    if not os.path.exists(
        os.path.join(SCRIPT_PATH, "wemod_bin", "WeMod.exe")
    ):
        main()

    log("Finished prefix copy")


# Function to build a new wineprefix
def build_prefix(proton_dir: str) -> None:
    import FreeSimpleGUI as sg

    # Set environment path
    path = (
        os.path.join(SCRIPT_PATH, "bin")
        + ":"
        + proton_dir
        + ":"
        + os.getenv("PATH")
    )

    # deref
    winpath = os.path.join(WINEPREFIX, "drive_c", "windows")
    log(f"Dereferencing '{winpath}'")
    deref(winpath)

    deps = []

    # Choose method to install dotnet48
    dotnet48_method = popup_options(
        "dotnet48",
        """Would you like to install dotnet48 with winetricks (default) or with wemod-launcher?
winetricks is for GE-Proton 8 or above and wemod-launcher is for GE-Proton 7
be warned that GE-Proton 7 (the wemod-launcher opion) isn't working well, you can try using it anyway""",
        ["winetricks", "wemod-launcher"],
    )

    # Add dependencies to the list
    deps.append("-q sdl cjkfonts vkd3d dxvk2030")

    if dotnet48_method == "winetricks":
        deps.append("-q dotnet48")

    # Install dependencies
    log("Running dependencies installation. This could take a while...")
    main()

    # Install each dependency
    resp = 0
    dep_i = -1
    while resp == 0 and (len(deps) - 1) > dep_i:
        dep_i = dep_i + 1
        resp = winetricks(deps[dep_i], path)

    # Install dotnet48 using wemod-launcher if selected
    if dotnet48_method == "wemod-launcher":
        log("Installing dotnet48...")
        dotnet48 = get_dotnet48()
        wine("winecfg -v win7", path)
        dotnet48_result = wine(dotnet48, path)

        if (
            dotnet48_result != 0
            and dotnet48_result != 194
            and dotnet48_result != -15
        ):
            exit_with_message(
                "dotnet48 install error",
                "dotnet48 installation exited with code '{}'".format(
                    dotnet48_result
                ),
            )

    wine("winecfg -v win10", path)  # Set Windows version to Windows 10

    # Finalize setup
    if resp == 0:
        log("Finished dependencies installation. Writing init file...")
        open(INIT_FILE, "a").close()
    else:
        exit_with_message(
            "ERROR",
            "Failed dependencies installation with code '{}'. Aborting...".format(
                resp
            ),
            resp,
        )


def split_list_by_delimiter(
    input_list: List[str], delimiter: str
) -> List[List[str]]:
    result = []
    current_sublist = []
    for item in input_list:
        if item == delimiter:
            if current_sublist:
                result.append(current_sublist)
                current_sublist = []
        else:
            current_sublist.append(item)
    if current_sublist:
        result.append(current_sublist)
    return result


def join_lists_with_delimiter(
    sublists: List[List[str]], delimiter: Optional[str] = None
) -> List[str]:
    result = []
    for sublist in sublists:
        result.extend(sublist)
        if delimiter is not None:
            result.append(delimiter)
    if delimiter is not None and result:
        result.pop()  # Remove the last delimiter if delimiter is not None
    return result


# Main run function
def run(skip_init: bool = False) -> str:
    # Get passed args
    ARGS = sys.argv[1:]

    # Subdivide the list into multiple lists based on delimiter
    AARGS = split_list_by_delimiter(ARGS, "--")

    # Log the args for future improvment
    log(
        f"The subsplit args list is {len(AARGS)} long and the full contents are: {AARGS}"
    )

    # Take the steam command part and merge it back into one list split by delimiter
    REAPER_CMD = join_lists_with_delimiter(AARGS[:-1], "--")

    # Take the end that runs the game
    PROTON_CMD = AARGS[-1]

    # Take the proton path
    PROTON = PROTON_CMD[0]

    # Initialize environment if not skipped
    if not skip_init:
        init(PROTON)

    # Get working dir
    WORK_DIR = os.path.realpath(os.getcwd())

    # Get game exe
    GAME_EXE = os.path.realpath(PROTON_CMD[2])

    # Make gamepath be relative to workdir (workdir is the root game dir)
    REL_EXE = os.path.relpath(GAME_EXE, WORK_DIR)

    # Make shure the gamepath is in windows format
    WIN_CMD = REL_EXE.replace(os.sep, "\\\\")

    # If we have more args we prepare them to be added at the end
    if len(PROTON_CMD) > 3:
        LAUNCH_OPTIONS = " '" + "' '".join(PROTON_CMD[3:]) + "'"
    else:
        LAUNCH_OPTIONS = ""

    # Create the reaper string
    REAPER_STR = "' '".join(REAPER_CMD)

    # Construct the final command
    FINAL = f"'{REAPER_STR}' -- '{PROTON}' waitforexitandrun {WEMOD_BAT} '{WIN_CMD}'{LAUNCH_OPTIONS}"

    # Log the final command
    log(f"Executing:\n\t{FINAL}\n")
    print(f"Executing:\n\t{FINAL}\n")

    # Execute the final command
    process = subprocess.Popen(FINAL, stdout=subprocess.PIPE, shell=True)
    for line in iter(process.stdout.readline, ""):
        if line == None or line == b"":
            break
        log(line.decode("utf8"))

    resp = process.wait()
    log(f"Exit command with '{resp}'")
    return "EXIT"


# Log Python version and ensure dependencies
requirements_txt = os.path.join(SCRIPT_PATH, "requirements.txt")

script_name = "wemod-laucher"
script_version = "1.0153"
last_name = load_conf_setting("ScriptName")
last_version = load_conf_setting("Version")

if last_name and last_name != script_name:
    log("Warnig config might be for a other script, overwriting name")
elif not last_name:
    log("Adding script name to config")
if last_version:
    try:
        if float(last_version) < float(script_version):
            log(
                f"Config on version {last_version} updating to {script_version}"
            )
        elif float(last_version) > float(script_version):
            log(
                f"Warnig config on version {last_version} downgrading to {script_version}"
            )
    except Exception as e:
        log(f"Warnig config error '{e}' changing version to {script_version}")
else:
    log("Adding script version to config")

save_conf_setting("ScriptName", script_name)
save_conf_setting("Version", script_version)
log(f"The script {script_name} is running on version {script_version}")
print(
    f"The wemod script {script_name} is running on version {script_version}"
)

if check_dependencies(requirements_txt):
    log("All dependencies are already installed.")
else:
    log("Dependencies missing")

    log("Trying to install Dependencies...")

    venv_path = load_conf_setting("VirtualEnvironment")
    # Try to install the dependencies
    pip_install = f"install -r '{requirements_txt}'"
    if not venv_path:
        return_code = pip(pip_install)
    else:
        return_code = 98
    if return_code != 0:
        if return_code != 98:
            log("Creating virtual environment...")
        else:
            log("Ensuring virtual environment...")
        # Create a virtual environment using venv
        if not venv_path:
            venv_path = "wemod_venv"
        try:
            if os.path.isabs(venv_path):
                subprocess.run(
                    [sys.executable, "-m", "venv", venv_path], check=True
                )
            else:
                subprocess.run(
                    [
                        sys.executable,
                        "-m",
                        "venv",
                        os.path.abspath(os.path.join(SCRIPT_PATH, venv_path)),
                    ],
                    check=True,
                )
            log("Virtual environment created successfully.")
        except subprocess.CalledProcessError:
            log(
                "Failed to create virtual environment, trying to force install venv"
            )
            return_code = pip("install --break-system-packages venv")
            if return_code != 0:
                log(
                    "CRITICAL: The python package 'venv' is not installed and could not be downloaded"
                )
                exit_with_message(
                    "Missing python-venv",
                    "The python package 'venv' is not installed and could not be downloaded. Error.",
                )
            else:
                try:
                    if os.path.isabs(venv_path):
                        subprocess.run(
                            [sys.executable, "-m", "venv", venv_path],
                            check=True,
                        )
                    else:
                        subprocess.run(
                            [
                                sys.executable,
                                "-m",
                                "venv",
                                os.path.abspath(
                                    os.path.join(SCRIPT_PATH, venv_path)
                                ),
                            ],
                            check=True,
                        )
                    log("Virtual environment created successfully.")
                except subprocess.CalledProcessError:
                    log(
                        "CRITICAL: Backup failed to create virtual environment, exiting"
                    )
                    exit_with_message(
                        "Error on package venv",
                        "Failed to create virtual environment. Error.",
                    )

        save_conf_setting("VirtualEnvironment", venv_path)
        if venv_path and not os.path.isabs(venv_path):
            venv_path = os.path.abspath(os.path.join(SCRIPT_PATH, venv_path))

        # Determine the path to the Python executable within the virtual environment
        venv_python = os.path.join(venv_path, "bin", "python")

        # Build the command to re-run the script within the virtual environment
        script_file = os.path.abspath(__file__)

        # Pass  all command line arguments
        command = [venv_python, script_file] + sys.argv[1:]

        # Preinstall dependencies in the virtual environment
        return_code = pip(pip_install, venv_path)
        if return_code != 0:
            log("CRITICAL: Dependencies can't be installed")
            exit_with_message(
                "Dependencies install error",
                "Failed to install dependencies. Error.",
            )

        log("Re-running script within virtual environment")

        # Execute the script within the virtual environment
        process = subprocess.run(command, capture_output=True, text=True)

        # Send output and error to steam console
        # If function log worked it gets logged by the re-run
        print(str(process.stdout))
        print(str(process.stderr))
        sys.exit(process.returncode)


# Main execution block
RESP = ""
try:
    RESP = run()
except Exception as e:
    RESP = "ERR:\n" + str(e)

# Log final response or error
log(str(RESP) + "\n\n\n")
